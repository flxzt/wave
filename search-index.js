var searchIndex = new Map(JSON.parse('[\
["wave",{"doc":"wave","t":"EEEEEEECCCCSSSHHHHHHHHHFFFKNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHNNNNNOOONNNNNNNNNOOONNPPGFFNNNNNNNNNNNNNNOONNNNNNNNNONNNNNNNNNOOGPFPPPPPFFGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNOOOOONNNNNNNNNNNNNNNN","n":["Gesture","GestureRecognizer","HandState","RecognizerParams","RecognizerResult","RecognizerStatus","SensorMeasurement","cbind","math","measurements","recognizer","HISTORY_SIZE","RES_X","RES_Y","coords_cartesian_from_spherical","coords_spherical_from_cartesian","gesture_recognizer_new","gesture_recognizer_reset","gesture_recognizer_update","recognizer_params_default","recognizer_result_default","sensor_measurement_invalid","sensor_params_default_vl53l5cx","CoordsCartesian","CoordsSpherical","MovingAvg","MovingAvgIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","dist_to","eq","eq","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into_iter","invalid","is_invalid","matrix_2d_reverse_cols","matrix_2d_reverse_rows","matrix_2d_rotate_180deg","matrix_2d_rotate_270deg","matrix_2d_rotate_90deg","matrix_2d_transpose","moving_avg","new","next","partial_cmp","partial_cmp","phi","r","theta","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","x","y","z","zero","zero","HandFound","HandNotFound","HandState","SensorMeasurement","SensorParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","default_vl53l5cx","eq","fmt","fmt","fmt","fov_horizontal","fov_vertical","from","from","from","into","into","into","invalid","new","partial_cmp","time_ms","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zone_dist","hand_pos","Gesture","GestureNone","GestureRecognizer","GestureStaticHold","GestureSwipeDown","GestureSwipeLeft","GestureSwipeRight","GestureSwipeUp","RecognizerParams","RecognizerResult","RecognizerStatus","RecognizerStatusInitFailure","RecognizerStatusInvalidInput","RecognizerStatusOk","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","cmp","default","default","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","gesture","gesture_threshold_dist","hand_state","into","into","into","into","into","new","params","partial_cmp","reset","sensor_params","static_hold_time_ms","static_hold_tolerance_dist","swipe_horizontal_travel_dist","swipe_tolerance_dist","swipe_vertical_travel_dist","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update"],"q":[[0,"wave"],[11,"wave::cbind"],[23,"wave::math"],[81,"wave::measurements"],[122,"wave::measurements::HandState"],[123,"wave::recognizer"],[200,"core::clone"],[201,"core::fmt"],[202,"core::fmt"],[203,"core::default"],[204,"core::option"],[205,"core::ops::arith"],[206,"core::ops::arith"],[207,"core::convert"],[208,"core::iter::traits::exact_size"],[209,"core::cmp"],[210,"core::result"],[211,"core::any"]],"d":["","","","","","","","C Bindings.","Math Utilities.","Sensor Measurements.","Gesture Recognizer","The history size.","The horizontal sensor resolution.","The vertical sensor resolution.","Converts spherical to cartesian coordinates.","Converts cartesian to spherical coordinates.","A new gesture recognizer with the given parameters.","Resets the gesture recognizer with the given parameters.","Updates the gesture recognizer with a new measurement and …","Default recognizer parameters, providing a good starting …","Default result, meaning no hand is found and no gestures …","Creates an invalid measurement (distances are set to <code>-1.0</code>).","Default sensor parameters for the ST VL53L5CX TOF-Sensor.","Cartesian coordinates.","Represents spherical coordinates in mathematical naming …","Iterator adapter that calculates the moving average.","The iterator trait for MovingAvg.","","","","","","","","","","Calculates the euclidean distance to other.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns invalid coordinates (<code>r</code> is set to <code>-1.0</code>).","Checks if the coorindate is invalid (<code>r</code> is &lt; <code>0.0</code>).","Mirror / reverse the columns of the matrix.","Mirror / reverse the rows of the matrix.","Rotates the matrix 180 degrees.","Rotates the matrix 270 degrees in clockwise direction.","Rotates the matrix 90 degrees in clockwise direction.","Transposes the given matrix.","Calculate the moving average with the given window size.","A new moving average iterator adapter.","","","","Angle with respect to polar / z-axis (zenith) (rad).","Distance to the origin.","Angle with respect to x-axis (azimuth) (rad).","","","","","","","","","","The distance to the origin on the x-axis.","The distance to the origin on the y-axis.","The distance to the origin on the z-axis.","The origin.","Origin coordinates (<code>r</code>, <code>theta</code> and <code>phi</code> are set to <code>0.0</code>).","Hand was found with this position.","No hand was found.","The recognized hand state.","Represents a sensor measurement coming from the TOF sensor.","Configurable sensor parameters. Different for every sensor.","","","","","","","","","","The default parameters for the ST VL53L5CX TOF-Sensor.","","","","","The horizontal FOV of the sensor.","The vertical FOV of the sensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","An invalid measurement. The time is set to zero, distances …","Creates a new measurement.","","The time of the measurement in milliseconds. Must be …","","","","","","","","","","The measured distances of each zone.","The hand position in spherical coordinates.","A hand gesture.","No recognized gesture.","The gesture recognizer.","A static hold.","A down swipe.","A left swipe.","A right swipe.","A up swipe.","Parameters for gesture recognition.","A gesture prediction result.","The status of the gesture recognizer.","Indicates a failure while the recognizer was initialized.","Indicates invalid input to the recognizer.","Ok.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The recognized gesture, GestureNone if no gesture was …","The furthest hand distance for gesture recognition.","The current hand state.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A new gesture recognizer initialized with the given …","Gets the current configured gesture recognizer parameters.","","Resets the gesture recognizer with the given parameters.","Gets the current configured sensor parameters.","The time the hand has to be still to recognize a static …","How much the hand can move towards / away from the sensor …","How much distance the hand has to travel to detect a …","How much the hand can move towards / away from the sensor …","How much distance the hand has to travel to detect a …","","","","","","","","","","","","","","","","Updates the gesture recognizer with a new measurement and …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,10,2,1,10,2,1,10,2,2,1,2,1,10,2,2,1,1,10,2,1,10,10,1,1,0,0,0,0,0,0,20,10,10,2,1,1,1,1,2,1,10,2,1,10,2,1,10,2,2,2,2,1,33,33,0,0,0,33,4,8,33,4,8,33,4,8,4,8,33,4,8,4,4,33,4,8,33,4,8,8,8,8,8,33,4,8,33,4,8,33,4,8,8,35,0,34,0,34,34,34,34,34,0,0,0,7,7,7,34,9,3,7,5,34,9,3,7,5,34,9,3,7,5,34,9,3,34,34,9,3,7,5,34,9,3,7,5,9,3,9,34,9,3,7,5,5,5,34,5,5,3,3,3,3,3,34,9,3,7,5,34,9,3,7,5,34,9,3,7,5,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[2,1],[[3,4],5],[[5,3,4,6],7],[[5,8,9],7],[[],3],[[],9],[[],8],[[],4],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[1,1],[[[10,[-1,-2]]],[[10,[-1,-2]]],[11,11],[11,11]],[[2,2],12],[[2,2],13],[[1,1],13],[[2,14],15],[[1,14],15],[[[10,[-1,-2]],14],15,[11,16],[11,16]],[-1,-1,[]],[1,2],[-1,-1,[]],[2,1],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[1,13],[[[17,[[17,[-1]]]]],[[17,[[17,[-1]]]]],[18,19]],[[[17,[[17,[-1]]]]],[[17,[[17,[-1]]]]],[18,19]],[[[17,[[17,[-1]]]]],[[17,[[17,[-1]]]]],[18,19]],[[[17,[[17,[-1]]]]],[[17,[[17,[-1]]]]],[18,19]],[[[17,[[17,[-1]]]]],[[17,[[17,[-1]]]]],[18,19]],[[[17,[[17,[-1]]]]],[[17,[[17,[-1]]]]],[18,19]],[[20,6],[[10,[20,-1]]],11],[[-1,6],[[10,[-1,-2]]],11,11],[[[10,[-2,-1]]],[[21,[-3]]],[11,[23,[],[[22,[]]]],[24,[],[[22,[]]]],[25,[],[[22,[]]]],26,[27,[6]]],[[29,[],[[28,[-1]]]],11],[]],[[2,2],[[21,[30]]]],[[1,1],[[21,[30]]]],0,0,0,[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,0,0,[[],2],[[],1],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[4,4],[8,8],[[],4],[[8,8],13],[[33,14],15],[[4,14],15],[[8,14],15],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],8],[[[17,[[17,[12]]]]],8],[[8,8],[[21,[30]]]],0,[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[9,9],[3,3],[7,7],[5,5],[[34,34],30],[[],9],[[],3],[[34,34],13],[[34,14],15],[[9,14],15],[[3,14],15],[[7,14],15],[[5,14],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,4],5],[5,3],[[34,34],[[21,[30]]]],[[5,3,4,6],7],[5,4],0,0,0,0,0,[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[5,8,9],7]],"c":[],"p":[[5,"CoordsSpherical",23],[5,"CoordsCartesian",23],[5,"RecognizerParams",123],[5,"SensorParams",81],[5,"GestureRecognizer",123],[1,"u32"],[6,"RecognizerStatus",123],[5,"SensorMeasurement",81],[5,"RecognizerResult",123],[5,"MovingAvg",23],[10,"Clone",200],[1,"f32"],[1,"bool"],[5,"Formatter",201],[8,"Result",201],[10,"Debug",201],[1,"array"],[10,"Copy",202],[10,"Default",203],[10,"MovingAvgIter",23],[6,"Option",204],[17,"Output"],[10,"Add",205],[10,"Sub",205],[10,"Div",205],[10,"Sum",206],[10,"From",207],[17,"Item"],[10,"ExactSizeIterator",208],[6,"Ordering",209],[6,"Result",210],[5,"TypeId",211],[6,"HandState",81],[6,"Gesture",123],[15,"HandFound",122]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
